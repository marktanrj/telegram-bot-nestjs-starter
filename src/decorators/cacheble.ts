import { Inject } from '@nestjs/common';
import { CacheService } from '../modules/cache/cache.service';

/**
 * A method decorator that provides caching functionality for class methods in NestJS applications.
 * Results of decorated methods are stored in cache using the provided CacheService.
 *
 * The cache key is generated by combining the method name and stringified arguments.
 *
 * @param ttlMs - Time-to-live in milliseconds for the cached value
 *
 * @example
 * ```typescript
 * class UserService {
 *   @Cacheable(3600000) // Cache for 1 hour
 *   async getUserById(id: string): Promise<User> {
 *     // Method implementation
 *   }
 * }
 * ```
 *
 * @throws {Error} If CacheService injection fails
 * @returns A method decorator that wraps the original method with caching logic
 */
export function Cacheable(ttlMs: number) {
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;

    const cacheServiceInjection = Inject(CacheService);
    cacheServiceInjection(target, 'cacheService');

    descriptor.value = async function (...args: any[]) {
      const cacheService: CacheService = (this as any).cacheService;

      const cacheKey = `${propertyKey}:${JSON.stringify(args)}`;
      const cachedResult = await cacheService.get(cacheKey);

      if (cachedResult) {
        return cachedResult;
      }

      const result = await originalMethod.apply(this, args);
      await cacheService.set(cacheKey, result, ttlMs);

      return result;
    };

    return descriptor;
  };
}
